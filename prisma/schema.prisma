// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SessionType {
  PUBLIC
  PRIVATE
}

enum ParticipantRole {
  HOST
  COLLABORATOR
}

// OAuth-related models for NextAuth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model NextAuthSession {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("nextauth_sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Your existing User model with OAuth fields added
model User {
  id                    String   @id @default(cuid())
  email                 String   @unique
  password              String?  // Made optional for OAuth users
  displayName           String
  image                 String?  // For OAuth profile pictures
  isVerified            Boolean  @default(false)
  verificationToken     String?
  resetToken            String?
  resetTokenExpiry      DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  lastLogin             DateTime?
  loginAttempts         Int      @default(0)
  lockedUntil           DateTime?
  emailVerified         DateTime? // For NextAuth compatibility
  
  // Relations
  ownedSessions         Session[]
  participations        SessionParticipant[]
  messages              Message[]
  sessionFiles          SessionFile[]
  fileLocks             FileLock[]
  
  // OAuth relations
  accounts              Account[]
  nextAuthSessions      NextAuthSession[]

  @@map("users")
}

model Session {
  id          String      @id @default(cuid())
  title       String
  description String?
  type        SessionType @default(PUBLIC)
  isActive    Boolean     @default(true)
  content     Json        @default("{}")
  settings    Json        @default("{}")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  expiresAt   DateTime?
  lastActivity DateTime   @default(now())
  
  // Relations
  ownerId      String
  owner        User                  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  participants SessionParticipant[]
  messages     Message[]
  files        SessionFile[]

  @@map("sessions")
}

model SessionParticipant {
  id        String            @id @default(cuid())
  role      ParticipantRole   @default(COLLABORATOR)
  joinedAt  DateTime          @default(now())
  isActive  Boolean           @default(true)
  
  // Relations
  userId    String
  sessionId String
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  session   Session           @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([userId, sessionId])
  @@map("session_participants")
}

model SessionFile {
  id        String   @id @default(cuid())
  name      String
  language  String   @default("javascript")
  content   String   @default("")
  size      Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  sessionId String
  createdBy String
  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  creator   User    @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  lock      FileLock?

  @@unique([sessionId, name])
  @@map("session_files")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  
  // Relations
  userId    String
  sessionId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model FileLock {
  id        String   @id @default(cuid())
  fileId    String   @unique
  lockedBy  String
  lockedAt  DateTime @default(now())
  expiresAt DateTime // Auto-expire locks after inactivity
  
  // Relations
  file      SessionFile @relation(fields: [fileId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [lockedBy], references: [id], onDelete: Cascade)

  @@map("file_locks")
}
